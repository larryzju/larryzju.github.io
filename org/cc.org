#+TITLE: ORG 测试页面
#+AUTHOR: Zhao Wenbin
#+EMAIL:  larryzju@163.com
# #+OPTIONS: toc:nil 
#+STYLE: <link rel="stylesheet" type="text/css" href="./css/core.css" />

#+BEGIN_VERSE
Great clouds overhead
Tiny black birds rise and fall
Snow covers Emacs

    -- AlexSchroeder
#+END_VERSE

* 数学公式

** 爱因斯坦质能方程

   $$e = mc^2$$

** 勾股定理

设直角三角形 a 和 b 为两直角边，c 为斜边，则有：$$ a^2 + b^2 = c^2 $$

- 设一直角三角形，其中两边长为 3 和 4,求第三边长度。

   *解：* 
    - 若第三边为直角边，则 $c = \sqrt{ 3^2 + 4^2 } = 5$
    - 若第三边不是直角边，则 $c = \sqrt{ 4^2 - 3^2 } = \sqrt{7} = 2.646$

** Physical Problem

Angles are written as Greek letters \alpha, \beta and \gamma. The mass if
the sun is M_sun = 1.989 x 10^30 kg. The radius of the sun is R_{sun} =
6.96 x 10^8 m. If $a^2=b$ and $b=2$, then the solution must be either
$a=+\sqrt{2}$ or $a=-\sqrt{2}$.
\begin{equation}
x=\sqrt{b}
\end{equation}


** 万有引力公式

$$ F = G \frac{Mm}{R^2} $$

万有引力大小正比于两物体的质量之积，与距离之平方成反比

** 欧拉公式

$$ e^{j\omega} = cos(\omega) + j sin(\omega) $$
$$ cos( \omega ) = \frac{ e^{j\omega} + e^{-j\omega} }{2} $$

** 欧基米德浮力公式

$$ F_{浮} = m_{排}g $$

** 牛顿－莱布尼茨公式

$$ \int_{a}^{b} f(x) dx = F(b) - F(a) $$

** 微分中值定理
$$\frac{f(b) - f(a)} { b-a } = f(\epsilon) \quad (a \leq \epsilon \leq b)$$

* 历史故事

** 九龙夺嫡

** 李卫当官

* IT 技术

** LINUX 史话

Linux 诞生于 1991 年，源于芬兰一大学生的业余爱好。

** 操作系统

*** Windows

最多被布置的操作系统，是使更多的人进入 PC 时代的伟大发明，拥有最多的使用者和应用。虽然被许多人指责，但不可否认 Windows 的贡献。

*** MAC OS X

唯一可以与 Windows 相媲美的操作系统。

*** Minix

目前为大多数人认可的贡献是它启发了 Linus 牵头开发了 Linux 操作系统。

*** Linux

LINUX 作为开源界近年的重要工程，是整合各开源项目的主要平台。以 Minix 为蓝本开发出的类 UNIX 操作系统，强调工程实现，虽然批评者认为其缺少现代操作系统的一些新的设计，但运行十分可靠，支持非常多的硬件，进化速度非常快。

*** Plan9

实验性的操作系统，是 Bell 实验室对 UNIX 开发思路上提出了很多新的设计。强化了一切皆文件的设计，细化了文件系统层次。虽然几乎不能投入实用，但对于操作系统设计有很多的参考价值。

*** FreeBSD

先于 LINUX 操作系统的可运行在 x86 平台上的类 UNIX 操作系统，具有纯正的 UNIX 血统。在网络应用上具有非常重要的应用空间，有强大的开发团队，但较于 Linux 它对于硬件支持和个人使用方面的支持有限。虽然有人坚持 FreeBSD 较 Linux 更为优秀，但 Linux 将越来越多地占据 BSD 的布置。

** 编程语言

*** ASM

处理器终级语言，在优化和理解计算机架构上十分重要。

直接用 ASM 开发将越来越困难，但理解简单的汇编语言是必要的。

*** C

UNIX 的主要开发语言，一种实用的、简洁的、高效的语言。其运行效率可堪与机器汇编语言相比，语法则比之简洁。在目前的操作系统中，标准开发库使得 C 语言成为一种可移植的语言工具。有人将之看作 UNIX/LINUX 上的脚本语言。

虽然缺少现代语言中的许多特性，但对于追求效率和机器底层操作性的方面有无法替代的地位。对于想要对计算机学深入理解，进行系统级开发，追求工程性的程序员，C 是必要的一门学问。

*** C++

在兼容 C 语言标准的前提下加入了面向对象、模板等现代语言的功能。既包含了底层数据操作的特性，又为工程开发提供了许多方便的功能。

批评者认为 C++ 语言过于庞杂，兼容 C 语言束缚了语言的语法美感，库的实现过于庞大，过深的封装，缺少自动内存管理等。这门语言入门较 C 语言容易，但极进阶比较难。虽然有不少很好的库和模板，没有统一的 API 设计使得不同库之间的实现混乱、庞大，用户难以学习。

C++ 有许多好的功能，在 GUI、大型应用程序开发方面具有很大的应用空间。

*** Java

工业化设计的语言，以规范而不求灵活为特点，高度的可移植性，面向对象设计，具有良好的库的设计，特别适合于开发大型程序。

批评者认为其缺少必要的语言功能，不符合强调程序设计技术和艺术的品味，在虚拟机上运行使得其效率要远低下于编译语言。

对于移动平台开发，可移植平台开发是十分有效的。对于想以编程为工作的码农们，掌握 Java 是必要的。

*** Scheme/Lisp/Racket

LISP 作为最早的程序语言之一（在目前已知的、还在使用的语言中仅次于 Fortran）。其中有很多领先于时代的设计时至今日仍然是非常高端的设计。现代语言中或多或少都借鉴了 LISP 中的特性，如第一类函数、高阶函数、动态类型等。LISP 除了这些特性外，S 表达式的特殊表达方式使得其语法与数据高度统一，具有很大的扩展性。

LISP 的缺点在于缺少可靠的实现和编译器，缺少统一的库的设计。LISP 对于想要认真思考程序设计的程序员是必修的一门学问。

*** Python/Perl/Ruby

现代语言中高度实用的脚本语言，语言设计上从 Perl、Python 和 Ruby 依序更加美观和强大，库的实现上 Perl 和 Python 最为强大、Ruby 有待完整。

对于日常维护、一次性处理方面脚本语言具有很强的应用空间。这类语言设计中包含了现代语言的很多好的设计，在计算性能越来越强的情况下，脚本可以广泛地用于各种领域。作为程序员掌握一门脚本语言是必须的。


** 算法与数据结构
* 人文自然




